vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector<pair<pair<int, int>, int>> &g)
{
    // Write your code here.
    //create adhacecny list coresponding to a node wiyth weights
    unordered_map<int,list<pair<int,int>>>adj;
    for(int i=0;i<g.size();i++){
        int u = g[i].first.first;
        int v = g[i].first.second;
        int w = g[i].second;
        
        adj[u].push_back({v,w});
        adj[v].push_back({u,w});
    }
    vector<int>key(n+1,INT_MAX);//took n+1 for depicting nodes with index
    vector<bool>mst(n+1,false);
    vector<int>parent(n+1,INT_MAX);
    
    key[1]=0;
    parent[1]=-1;
    
    for(int i=0;i<n-1;i++){//iterate for n-1 edges
        int mini=INT_MAX;
        int u;
        //find min from key array
        for(int v=1;v<=n;v++){
            if(mst[v]==false && key[v]<mini){
                mini=key[v];
                u=v;
            }
        }
         //mark min node true in mst aray
         mst[u]=true;
        //now find adjacent of u
        for(auto it:adj[u]){
            int v=it.first;
            int w=it.second;//weight of node
            if(mst[v]==false && w<key[v]){
                key[v]=w;
                parent[v]=u;
            }
        }
    }
    vector<pair<pair<int, int>, int>>ans;
    for(int i=2;i<=n;i++){
        ans.push_back({{parent[i], i}, key[i]}); 
    }
    return ans;
}